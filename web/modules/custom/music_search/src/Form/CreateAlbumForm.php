<?php

namespace Drupal\music_search\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\TempStore\PrivateTempStoreFactory;
use Drupal\music_search\DataService;
use Drupal\music_search\SearchInterface;
use ErrorException;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;


/**
 * Form definition for picking data for a new Album.
 */
class CreateAlbumForm extends FormBase {

  /**
   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
   */
  private $tempStoreFactory;

  /**
   * @var \Drupal\music_search\SearchInterface
   */
  private $search_api;

  /**
   * @var \Drupal\music_search\DataService
   */
  private $dataService;

  /**
   * CreateAlbumForm constructor.
   * @param PrivateTempStoreFactory $tempStoreFactory
   * @param array $search_api
   * @param DataService $dataService
   */
  public function __construct(PrivateTempStoreFactory $tempStoreFactory,
                              array $search_api,
                              DataService $dataService) {
    $this->tempStoreFactory = $tempStoreFactory;
    $this->search_api = $search_api;
    $this->dataService = $dataService;
  }

  /**
   * @param ContainerInterface $container
   * @return CreateAlbumForm|static
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('tempstore.private'),
      [
        $container->get('spotify_search.search'),
        $container->get('discogs_search.search'),
      ],
      $container->get('music_search.data_service'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'create_album_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $data = $this->getData();

    $form['album_name'] = [
      '#type' => 'radios',
      '#title' => $this->t('Name'),
      '#options' => array_merge($data['album_names'], ['other_album_name' => 'Other:']),
      '#required' => TRUE,
    ];
    $form['other_album_name'] = [
      '#type' => 'textfield'
    ];

    $form['album_artists'] = [
      '#type' => 'radios',
      '#title' => $this->t('Artists'),
      '#options' => array_merge($data['album_artists'], ['other_album_artist' => 'Other:']),
      '#required' => TRUE,
    ];
    $form['other_album_artist'] = [
      '#type' => 'textfield'
    ];

    $form['album_image'] = [
      '#type' => 'radios',
      '#title' => $this->t('Cover'),
      '#options' => array_merge($data['album_covers'], ['other_album_covers' => 'Other:']),
      '#required' => TRUE,
    ];
    $form['other_album_covers'] = [
      '#type' => 'file'
    ];

    $form['album_description'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Description'),
      '#required' => TRUE,
    ];

    $form['album_released'] = [
      '#type' => 'radios',
      '#title' => $this->t('Release date'),
      '#options' => array_merge($data['album_release_dates'], ['other_album_release_dates' => 'Other:']),
      '#required' => TRUE,
    ];
    $form['other_album_release_dates'] = [
      '#type' => 'date'
    ];

    $form['album_label'] = [
      '#type' => 'radios',
      '#title' => $this->t('Label'),
      '#options' => array_merge($data['album_labels'], ['other_album_labels' => 'Other:']),
      '#required' => TRUE,
    ];
    $form['other_album_labels'] = [
      '#type' => 'textfield'
    ];

    $form['album_genre'] = [
      '#type' => 'radios',
      '#title' => $this->t('Genre'),
      '#options' => array_merge($data['album_genres'], ['other_album_genre' => 'Other:']),
      '#required' => TRUE,
    ];
    $form['other_album_genre'] = [
      '#type' => 'textfield'
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Create'),
      '#button_type' => 'primary',
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {

    // Store input data in tempstore.
    try {
      $album_data = [
        'title' => (($x = $form_state->getValue('album_name')) === 'other_album_name') ? $form_state->getValue('other_album_name') : $x,
        'album_artist' => (($x = $form_state->getValue('album_artists')) === 'other_album_artist') ? $form_state->getValue('other_album_artist') : $x,
        'album_cover' => (($x = $form_state->getValue('album_image')) === 'other_album_covers') ? $form_state->getValue('other_album_covers') : $x,
        'description' => $form_state->getValue('album_description'),
        'release_date' => (($x = $form_state->getValue('album_released')) === 'other_album_release_dates') ? $form_state->getValue('other_album_release_dates') : $x,
        // 'album_label' => (($x = $form_state->getValue('album_label')) === 'other_album_labels') ? $form_state->getValue('other_album_labels') : $x,
        'album_genre' => (($x = $form_state->getValue('album_genre')) === 'other_album_genre') ? $form_state->getValue('other_album_genre') : $x,
      ];

      // Handles artist
      $artist_name_id_prov = explode(":::", $album_data['album_artist']);
      $artist_id = $this->dataService->get_node_id('artist', $artist_name_id_prov[0]);

      // If artist doesn't exist in database.
      if (!$artist_id) {
        // Create new artist

        // If "other" field was chosen, search Spotify API and use first result.
        if ($form_state->getValue('album_artists') === 'other_album_artist') {
          $artist_search = json_decode($this->search_api[0]->getArtist($artist_name_id_prov[0]));
          $new_artist = json_decode($this->search_api[0]->getArtistById($artist_search->artists->items[0]->id));
        }
        // If Spotify field was chosen, search Spotify API and use first result.
        elseif ($artist_name_id_prov[2] == 'spotify') {
          $new_artist = json_decode($this->search_api[0]->getArtistById($artist_name_id_prov[1]));
        }
        // If Discogs data was chosen, search Discogs API and use first result.
        elseif ($artist_name_id_prov[2] == 'discogs') {
          $new_artist = json_decode($this->search_api[1]->getArtistById($artist_name_id_prov[1]));
        }

        $vals = [
          'title' => $new_artist->name,
        ];
        // Save the new artist and his id.
        $album_data['artist_id'] = $this->dataService->save_node('artist', $vals)->id();
      } else {
        $album_data['artist_id'] = $artist_id;
      }

      // Handles album cover
      $album_cover_id = $this->dataService->save_file($album_data['album_cover'], 'album_covers', 'image', $album_data['title'] . " - Cover",  $album_data['title'] . ".jpg");
      $album_data['cover_id'] = $album_cover_id;

      // Handles genre
      $genre_ids = $this->dataService->save_taxonomy('genre', $album_data['album_genre']);
      $album_data['genre_id'] = $genre_ids;

      // Create the new album
      $new_album = $this->dataService->save_node('album', $album_data);

      $form_state->setResponse(new RedirectResponse($new_album->toUrl()->toString()));
    }
    catch (\Exception $err) {
      $this->messenger()->addError($this->t('Something went wrong... please try again.'));
    }
  }

  /**
   * Gets all required data from the results picked in the previous form.
   * @return array
   */
  public function getData() {
    $data['album_names'] = [];
    $data['album_release_dates'] = [];
    $data['album_artists'] = [];
    $data['album_covers'] = [];
    $data['album_labels'] = [];
    $data['album_genres'] = [];

    // Result ids arrays
    $results['spotify_results'] = ['artists' => null, 'albums' => null];
    $results['discogs_results'] = ['artists' => null, 'albums' => null];

    // Get data from tempstore
    $tempstore = $this->tempStoreFactory->get('picked_ids');
    $ids = $tempstore->get('params');

    // Execute api queries for album and artist data.
    // Spotify
    foreach ($ids['spotify_ids'] as $id) {
      if ($id != 0) {
        $res_ids = explode(" ", $id);
        $album_id = $res_ids[0];
        $artist_id = $res_ids[1];

        $results['spotify_results']['albums'][] = json_decode($this->search_api[0]->getAlbumById($album_id));
        $results['spotify_results']['artists'][] = json_decode($this->search_api[0]->getArtistById($artist_id));
      }
    }
    // Discogs
    foreach ($ids['discogs_ids'] as $id) {
      if ($id != 0) {
        $res_ids = explode(" ", $id);
        $album_id = $res_ids[0];
        $artist_id = $res_ids[1];

        $results['discogs_results']['albums'][] = json_decode($this->search_api[1]->getAlbumById($album_id));
        $results['discogs_results']['artists'][] = json_decode($this->search_api[1]->getArtistById($artist_id));
      }
    }

    // Parse data into format for form.
    $data = $this->parseToFormFormat($data, $results, 'Spotify');
    return $this->parseToFormFormat($data, $results, 'Discogs');
  }

  /**
   * Parses the results to data to be displayed in the form.
   * @param array $data the array to be written to.
   * @param array $results the array to be read from.
   * @param string $provider identifier for which provider provided the data.
   * @return array $data.
   */
  public function parseToFormFormat(array $data, array $results, string $provider) {
    $suffix = ' - ' . $provider;

    // Skip if nothing was selected by the current provider
    if (is_null($results[strtolower($provider) . '_results']['albums'])) {
      return $data;
    }
    foreach ($results[strtolower($provider) . '_results']['albums'] as $album) {
      // name
      if (!empty($album->name)) {
        $data['album_names'][$album->name] = $album->name . $suffix;
      }
      // artist
      foreach ($album->artists as $artist) {
        if (!empty($artist->name)) {
          $data['album_artists'][$artist->name . ":::" . $artist->id . ":::" . strtolower($provider)] = $artist->name . $suffix;
        }
      }
      // cover
      foreach (array_slice($album->images, 0, 5, true) as $image) {
        if (!empty($image->url)) {
          $data['album_covers'][$image->url] = sprintf(
            '<p>From %s</p><img src="%s" width=250px>',
            $provider, $image->url);
        }
      }
      // release date
      if (!empty($album->release_date)) {
        $data['album_release_dates'][$album->release_date] = $album->release_date . $suffix;
      }
      // label
      if (!empty($album->label)) {
        $data['album_labels'][$album->label] = $album->label . $suffix;
      }
      // genre
      foreach ($album->genres as $genre) {
        if (!empty($genre)) {
          $data['album_genres'][$genre] = $genre . $suffix;
        }
      }
    }

    return $data;
  }
}
